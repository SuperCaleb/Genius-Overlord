import time
import logging

# Setting up logging configuration
logging.basicConfig(level=logging.DEBUG)

class StrikingHack:
    """
    Simulates a system corruption and counterattack mechanism.
    """
    def __init__(self):
        self.penetrator = "Penetration system activated."
        self.counterattack = [1, 5, 500, 10000, 500000, 100000]
        self.written_counter = f"{self.counterattack} has been written and activated."
        self.system_corruption = ("Corrupting system...", [50.0, 80.0, 100.0])
        self.corruption_active = True

    def check_system(self):
        """
        Checks the system's corruption status and logs appropriate messages.
        """
        time.sleep(5)
        if not self.corruption_active:
            logging.debug("System no longer corrupts.")
        elif self.written_counter:
            logging.debug(f"{self.counterattack} initiating counter...")
        else:
            logging.debug("It has been written.")

    def activate_penetration(self):
        """
        Activates the penetration system and logs the message.
        """
        logging.debug(self.penetrator)

    def initiate_counterattack(self):
        """
        Initiates the counterattack and logs the message.
        """
        logging.debug(self.written_counter)

    def corrupt_system(self):
        """
        Corrupts the system and logs the corruption levels.
        """
        logging.debug(self.system_corruption[0])
        for value in self.system_corruption[1]:
            logging.debug(f"Corruption level: {value}%")
            time.sleep(1)

# Example usage
hack = StrikingHack()
hack.activate_penetration()
hack.corrupt_system()
hack.check_system()
hack.initiate_counterattack()
